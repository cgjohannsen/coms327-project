
Character.h,475
# define CHARACTER_H2,20
class Character{Character13,151
  uint8_t visual_range;19,203
  uint8_t is_pc;20,227
  heap_node_t *hn;hn21,244
  uint8_t isAlive;22,263
  uint32_t color;23,282
  uint32_t speed;24,300
  uint32_t move_time;25,318
  int hitpoints;26,340
  Dice attack_damage;27,357
  char symbol;28,379
  uint8_t x;29,394
  uint8_t y;30,407
  uint8_t next_x;31,420
  uint8_t next_y;32,438
  uint16_t template_index 33,456
  std::string name;34,487

Dice.h,143
# define DICE_H2,15
class Dice 6,53
	uint32_t base,10,77
	uint32_t base, num,10,77
	uint32_t base, num, sides;10,77
	char str[str11,105

Dungeon.h,1577
# define DUNGEON_H2,18
# define DUNGEON_Y 20,325
# define DUNGEON_X 21,350
# define MIN_ROOMS 22,375
# define MAX_ROOMS 23,399
# define MIN_UP 24,424
# define MIN_DOWN 25,448
# define MAX_UP 26,472
# define MAX_DOWN 27,496
# define ROOM_MIN_X 28,521
# define ROOM_MIN_Y 29,545
# define ROOM_MAX_X 30,569
# define ROOM_MAX_Y 31,594
# define MAX_BUFFER 32,619
# define MAX_MONSTERS 33,646
# define MAX_OBJECTS 34,671
class Dungeon 37,698
	const std::string file_type 41,725
	uint32_t file_version 42,772
	uint32_t file_version = 0, file_size;42,772
	enum terrain 44,812
  		ter_wall,45,828
  		ter_immutable,46,842
  		ter_floor,47,861
  		ter_corridor,48,876
  		ter_stair_up,49,894
  		ter_stair_down,50,912
  		ter_unknown51,932
	class room 54,953
  		uint8_t x;56,976
  		uint8_t y;57,991
  		uint8_t width;58,1006
  		uint8_t height;59,1025
	class stair 62,1050
  		uint8_t x;64,1074
  		uint8_t y;65,1089
  		char dir;66,1104
	std::string message;69,1123
	uint16_t num_rooms;71,1146
	room *rooms;rooms72,1167
	uint16_t num_up;73,1181
	uint16_t num_down;74,1199
	stair *u_stairs;u_stairs75,1219
	stair *d_stairs;d_stairs76,1237
	uint16_t nummon;77,1255
	Pathfinder floor_pathfinder;79,1275
	Pathfinder all_pathfinder;80,1305
	uint8_t hardness[hardness82,1334
	terrain map[map83,1375
	terrain seen[seen84,1411
	PC player;86,1449
	Character *characters[characters87,1461
	Object *objects[objects88,1507
	std::vector<MonsterTemplate> monster_templates;89,1547
	std::vector<ObjectTemplate> object_templates;90,1596

IO.h,209
# define IO_H2,13
# define DUNGEON_X 6,52
# define DUNGEON_Y 7,74
# define DISPLAY_ALL_CMD 9,97
# define DISPLAY_MAP_CMD 10,130
# define DISPLAY_MONSTERS_CMD 11,163
# define DISPLAY_TELEPORT_CMD 12,196

MonsterTemplate.h,413
# define MONSTERTEMPLATE_H2,26
class MonsterTemplate{MonsterTemplate12,175
	std::string name;16,209
	std::string description;17,228
	std::vector<uint32_t> color;18,254
	Dice speed;19,284
	uint32_t abilities;20,297
	Dice hitpoints;21,318
	Dice attack_damage;22,335
	char symbol;23,356
	int rarity;24,370
	uint16_t index;25,383
	bool unique 26,400
	bool isValid 27,422
	uint8_t num_generated 28,444

Move.h,21
# define MOVE_H2,15

NPC.h,400
# define NPC_H2,14
#define NPC_SMART	7,74
#define NPC_TELEPATHIC	8,100
#define NPC_TUNNELING	9,130
#define NPC_ERRATIC	10,159
#define NPC_PASS	11,187
#define NPC_DESTROY	12,212
#define NPC_PICKUP	13,240
#define NPC_UNIQUE	14,267
#define NPC_BOSS	15,294
class NPC 19,344
	uint8_t last_seen_x;23,384
	uint8_t last_seen_y;24,406
	std::string description;25,428
	uint32_t abilities;26,454

Object.h,497
# define OBJECT_H2,17
class Object{Object11,149
	std::string name;15,173
	std::string description;16,192
	std::string type;17,218
	uint32_t color;18,237
    uint32_t hit_bonus;19,254
	Dice damage_bonus;20,278
	uint32_t dodge_bonus;21,298
	uint32_t defense_bonus;22,321
	uint32_t weight;23,346
	uint32_t speed_bonus;24,364
	uint32_t attribute;25,387
	uint32_t value;26,408
    bool artifact;27,425
	char symbol;28,444
	uint32_t rarity;29,458
	uint8_t x;31,477
	uint8_t y;32,489

ObjectTemplate.h,525
# define OBJECTTEMPLATE_H2,25
class ObjectTemplate{ObjectTemplate11,153
	std::string name;15,186
	std::string description;16,205
	std::string type;17,231
	uint32_t color;18,250
	Dice hit_bonus;19,267
	Dice damage_bonus;20,284
	Dice dodge_bonus;21,304
	Dice defense_bonus;22,323
	Dice weight;23,344
	Dice speed_bonus;24,358
	Dice attribute;25,377
	Dice value;26,394
	std::string artifact;27,407
	bool unique 28,430
	char symbol;29,452
	int rarity;30,466
	bool isValid 31,479
	uint8_t num_generated 32,501

PC.h,751
# define PC_H2,13
# define WEAPON 9,93
# define OFFHAND 10,112
# define RANGED 11,131
# define ARMOR 12,150
# define HELMET 13,170
# define CLOAK 14,189
# define GLOVES 15,208
# define BOOTS 16,227
# define AMULET 17,247
# define LIGHT 18,266
# define RING1 19,285
# define RING2 20,305
# define CARRY_CAPACITY 22,325
# define EQUIPMENT_SLOTS 23,353
# define MAX_SPELLS	24,381
typedef struct heap heap_t;26,407
class PC 32,478
	uint32_t base_speed 36,518
	int base_hitpoints 37,545
	uint8_t items_carried 41,582
	Object *equipment[equipment43,611
	Object *carry[carry44,648
	const char *spell_names[spell_names46,682
	Dice *spell_dice[spell_dice47,720
	uint32_t spell_range[spell_range48,751
	uint8_t num_spells 49,786

Pathfinder.h,394
# define PATHFINDER_H2,21
# define DUNGEON_X 7,84
# define DUNGEON_Y 8,106
#define row 9,128
#define col 10,148
class Pathfinder{Pathfinder12,169
	typedef struct dungeon_path{dungeon_path16,197
		heap_node_t *hn;hn17,227
 		uint8_t pos[pos18,246
 		uint8_t from[from19,265
 		uint16_t cost;20,285
	} dungeon_path_t;21,303
	uint8_t h[h23,323
	dungeon_path_t path[path24,357

heap.c,1020
struct heap_node 8,99
  heap_node_t *next;next9,118
  heap_node_t *prev;prev10,139
  heap_node_t *parent;parent11,160
  heap_node_t *child;child12,183
  void *datum;datum13,205
  uint32_t degree;14,220
  uint32_t mark;15,239
#define swap(18,260
#define splice_heap_node_lists(24,372
#define insert_heap_node_in_list(33,684
#define remove_heap_node_from_list(40,908
void print_heap_node(45,1041
void print_heap(61,1363
void print_heap_node_list(78,1665
void heap_init(94,1864
void heap_node_delete(104,2100
void heap_delete(122,2404
heap_node_t *heap_insert(heap_insert133,2569
void *heap_peek_min(heap_peek_min153,2895
static void heap_link(158,2971
static void heap_consolidate(172,3293
void *heap_remove_min(heap_remove_min213,4226
int heap_combine(248,4760
static void heap_cut(277,5411
static void heap_cascading_cut(291,5692
int heap_decrease_key(305,5918
int heap_decrease_key_no_replace(319,6160
int32_t compare(343,6737
char *print_int(print_int348,6836
int main(357,6954

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301
